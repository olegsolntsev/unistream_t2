using unistream_t2.Models;

namespace unistream_t2.Interfaces;

// Интерефейс репозитория - за счет IoC разрываем прямую связь (необходимость напрямую создавать экземпляр класса в месте использования репозитория),
// создавая основу для косвенной - через DI-контейнер и ту реализацию, что мы предложим (ну и для тестов тоже полезно - можем замокать репозиторий) 
public interface IEntityRepo
{
    // Оборачиваем результаты методов в Task'и, чтобы потом в боевой реализации репозитория легко перейти к async/await (который понадобиться 
    // для целей масштабирования с переходом на сетевое (и возможно распределенное) хранилище)
    // В нашей тестовой реализации будем использовать Task.FromResult()
    Task<Entity> GetAsync(Guid id);
    Task<bool> InsertAsync(Entity entity);
}
